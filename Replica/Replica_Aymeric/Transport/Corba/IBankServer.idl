module LoanManager {

interface BankServer
	
	{
		exception FailedLoginException 
		{ 
        	string message; 
      	}; 
      	
		exception RecordNotFoundException 
		{ 
        	string message; 
      	}; 
      	
		exception TransferException 
		{ 
        	string message; 
      	}; 
		
		enum Bank 
		{
			Royal, 
			National, 
			Dominion, 
			None
		};
		
		 struct Date
        {
            long year;
            long month;
            long day;
        };
        
        struct Loan
        {
            short loanNumber;
    		short customerAccountNumber;
    		long amount;
    		Date dueDate;
        };
        
        struct Customer
        {
    		short id;
    		string firstName;
    		string lastName;
    		string email;
    		Bank bank;
    		short accountNumber;
         	string phone;
    		string password;
        };
        
        struct Account
        {
        	short accountNumber;
    		Customer owner;
    		long creditLimit;
        };
        
        struct CustomerInfo
        {
    		string userName;
    		Account account;
    		sequence<Loan> loans;
        };
        
        struct BankInfo
        {
        	sequence<CustomerInfo> customersInfo;
        };
	
	 	short openAccount(in Bank bank, in string firstName, in string lastName, in string emailAddress, in string phoneNumber, in string password);
	    
	    
	    Customer getCustomer(in Bank bank, in string email, in string password)
	    	raises(FailedLoginException);
	            
	    Customer signIn(in Bank bank, in string email, in string password)
	    	raises(FailedLoginException);
	
	    Loan getLoan(in Bank bankId, in short accountNumber, in string password, in long loanAmount)
	    	raises(FailedLoginException);
	            
	    void delayPayment(in Bank bank, in short loanID, in Date currentDueDate, in Date newDueDate)
	    	raises(RecordNotFoundException);
	
	    BankInfo getCustomersInfo(in Bank bank)
	    	raises(FailedLoginException);
	    	
	    Loan TransferLoan(in short LoanId, in Bank CurrentBank, in Bank OtherBank)
	    	raises(TransferException);
    };
};
